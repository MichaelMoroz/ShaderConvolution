//The first 6 columns of the U matrix: 
float U[546] = float[](-1.2516E-07, -1.2715E-06, -3.7479E-06, -7.6960E-06, -1.3266E-05, -2.0624E-05, -2.9956E-05, -4.1471E-05, -5.5407E-05, -7.2033E-05, -9.1658E-05, -1.1464E-04, -1.4137E-04, -1.7234E-04, -2.0809E-04, -2.4925E-04, -2.9658E-04, -3.5094E-04, -4.1340E-04, -4.8519E-04, -5.6781E-04, -6.6306E-04, -7.7315E-04, -9.0076E-04, -1.0492E-03, -1.2228E-03, -1.4266E-03, -1.6675E-03, -1.9541E-03, -2.2979E-03, -2.7140E-03, -3.2233E-03, -3.8541E-03, -4.6468E-03, -5.6603E-03, -6.9822E-03, -8.7489E-03, -1.1181E-02, -1.4654E-02, -1.9853E-02, -2.8130E-02, -4.2461E-02, -7.0466E-02, -1.3634E-01, -3.4306E-01, -8.4285E-01, -3.4306E-01, -1.3634E-01, -7.0466E-02, -4.2461E-02, -2.8130E-02, -1.9853E-02, -1.4654E-02, -1.1181E-02, -8.7489E-03, -6.9822E-03, -5.6603E-03, -4.6468E-03, -3.8541E-03, -3.2233E-03, -2.7140E-03, -2.2979E-03, -1.9541E-03, -1.6675E-03, -1.4266E-03, -1.2228E-03, -1.0492E-03, -9.0076E-04, -7.7315E-04, -6.6306E-04, -5.6781E-04, -4.8519E-04, -4.1340E-04, -3.5094E-04, -2.9658E-04, -2.4925E-04, -2.0809E-04, -1.7234E-04, -1.4137E-04, -1.1464E-04, -9.1658E-05, -7.2033E-05, -5.5407E-05, -4.1471E-05, -2.9956E-05, -2.0624E-05, -1.3266E-05, -7.6960E-06, -3.7479E-06, -1.2715E-06, -1.2516E-07, 4.5871E-07, 6.4334E-06, 2.0853E-05, 4.4966E-05, 7.9899E-05, 1.2682E-04, 1.8699E-04, 2.6182E-04, 3.5285E-04, 4.6186E-04, 5.9085E-04, 7.4208E-04, 9.1816E-04, 1.1221E-03, 1.3573E-03, 1.6277E-03, 1.9381E-03, 2.2939E-03, 2.7013E-03, 3.1681E-03, 3.7031E-03, 4.3171E-03, 5.0230E-03, 5.8365E-03, 6.7766E-03, 7.8670E-03, 9.1369E-03, 1.0623E-02, 1.2372E-02, 1.4444E-02, 1.6916E-02, 1.9891E-02, 2.3507E-02, 2.7952E-02, 3.3485E-02, 4.0481E-02, 4.9482E-02, 6.1305E-02, 7.7220E-02, 9.9271E-02, 1.3086E-01, 1.7779E-01, 2.4931E-01, 3.5075E-01, 3.5119E-01, -4.7991E-01, 3.5119E-01, 3.5075E-01, 2.4931E-01, 1.7779E-01, 1.3086E-01, 9.9271E-02, 7.7220E-02, 6.1305E-02, 4.9482E-02, 4.0481E-02, 3.3485E-02, 2.7952E-02, 2.3507E-02, 1.9891E-02, 1.6916E-02, 1.4444E-02, 1.2372E-02, 1.0623E-02, 9.1369E-03, 7.8670E-03, 6.7766E-03, 5.8365E-03, 5.0230E-03, 4.3171E-03, 3.7031E-03, 3.1681E-03, 2.7013E-03, 2.2939E-03, 1.9381E-03, 1.6277E-03, 1.3573E-03, 1.1221E-03, 9.1816E-04, 7.4208E-04, 5.9085E-04, 4.6186E-04, 3.5285E-04, 2.6182E-04, 1.8699E-04, 1.2682E-04, 7.9899E-05, 4.4966E-05, 2.0853E-05, 6.4334E-06, 4.5871E-07, 5.4940E-08, 1.1276E-05, 4.8633E-05, 1.1934E-04, 2.2875E-04, 3.8176E-04, 5.8329E-04, 8.3852E-04, 1.1531E-03, 1.5331E-03, 1.9854E-03, 2.5178E-03, 3.1388E-03, 3.8584E-03, 4.6875E-03, 5.6389E-03, 6.7272E-03, 7.9691E-03, 9.3838E-03, 1.0994E-02, 1.2825E-02, 1.4908E-02, 1.7277E-02, 1.9977E-02, 2.3054E-02, 2.6570E-02, 3.0595E-02, 3.5212E-02, 4.0526E-02, 4.6658E-02, 5.3760E-02, 6.2013E-02, 7.1640E-02, 8.2908E-02, 9.6135E-02, 1.1168E-01, 1.2994E-01, 1.5121E-01, 1.7551E-01, 2.0187E-01, 2.2661E-01, 2.3823E-01, 2.0252E-01, 2.2027E-02, -4.0653E-01, 2.2198E-01, -4.0653E-01, 2.2027E-02, 2.0252E-01, 2.3823E-01, 2.2661E-01, 2.0187E-01, 1.7551E-01, 1.5121E-01, 1.2994E-01, 1.1168E-01, 9.6135E-02, 8.2908E-02, 7.1640E-02, 6.2013E-02, 5.3760E-02, 4.6658E-02, 4.0526E-02, 3.5212E-02, 3.0595E-02, 2.6570E-02, 2.3054E-02, 1.9977E-02, 1.7277E-02, 1.4908E-02, 1.2825E-02, 1.0994E-02, 9.3838E-03, 7.9691E-03, 6.7272E-03, 5.6389E-03, 4.6875E-03, 3.8584E-03, 3.1388E-03, 2.5178E-03, 1.9854E-03, 1.5331E-03, 1.1531E-03, 8.3852E-04, 5.8329E-04, 3.8176E-04, 2.2875E-04, 1.1934E-04, 4.8633E-05, 1.1276E-05, 5.4940E-08, 2.2927E-06, 1.2485E-05, -1.2711E-05, -1.0779E-04, -2.9609E-04, -5.9598E-04, -1.0236E-03, -1.5941E-03, -2.3229E-03, -3.2254E-03, -4.3184E-03, -5.6194E-03, -7.1475E-03, -8.9238E-03, -1.0971E-02, -1.3313E-02, -1.5979E-02, -1.8998E-02, -2.2403E-02, -2.6230E-02, -3.0519E-02, -3.5310E-02, -4.0650E-02, -4.6587E-02, -5.3170E-02, -6.0448E-02, -6.8469E-02, -7.7271E-02, -8.6880E-02, -9.7294E-02, -1.0847E-01, -1.2028E-01, -1.3249E-01, -1.4467E-01, -1.5606E-01, -1.6541E-01, -1.7060E-01, -1.6819E-01, -1.5254E-01, -1.1467E-01, -4.1217E-02, 8.3146E-02, 2.5268E-01, 3.2006E-01, -2.6119E-01, 9.1322E-02, -2.6119E-01, 3.2006E-01, 2.5268E-01, 8.3146E-02, -4.1217E-02, -1.1467E-01, -1.5254E-01, -1.6819E-01, -1.7060E-01, -1.6541E-01, -1.5606E-01, -1.4467E-01, -1.3249E-01, -1.2028E-01, -1.0847E-01, -9.7294E-02, -8.6880E-02, -7.7271E-02, -6.8469E-02, -6.0448E-02, -5.3170E-02, -4.6587E-02, -4.0650E-02, -3.5310E-02, -3.0519E-02, -2.6230E-02, -2.2403E-02, -1.8998E-02, -1.5979E-02, -1.3313E-02, -1.0971E-02, -8.9238E-03, -7.1475E-03, -5.6194E-03, -4.3184E-03, -3.2254E-03, -2.3229E-03, -1.5941E-03, -1.0236E-03, -5.9598E-04, -2.9609E-04, -1.0779E-04, -1.2711E-05, 1.2485E-05, 2.2927E-06, -1.0138E-06, 8.1916E-05, 2.4808E-04, 3.8300E-04, 3.9185E-04, 2.0259E-04, -2.4147E-04, -9.8701E-04, -2.0740E-03, -3.5381E-03, -5.4125E-03, -7.7283E-03, -1.0516E-02, -1.3803E-02, -1.7619E-02, -2.1990E-02, -2.6938E-02, -3.2486E-02, -3.8648E-02, -4.5434E-02, -5.2842E-02, -6.0857E-02, -6.9443E-02, -7.8541E-02, -8.8053E-02, -9.7834E-02, -1.0767E-01, -1.1727E-01, -1.2621E-01, -1.3393E-01, -1.3965E-01, -1.4232E-01, -1.4058E-01, -1.3262E-01, -1.1619E-01, -8.8552E-02, -4.6747E-02, 1.1662E-02, 8.6578E-02, 1.7053E-01, 2.3800E-01, 2.2568E-01, 2.0588E-02, -3.6559E-01, 1.4046E-01, -3.7472E-02, 1.4046E-01, -3.6559E-01, 2.0588E-02, 2.2568E-01, 2.3800E-01, 1.7053E-01, 8.6578E-02, 1.1662E-02, -4.6747E-02, -8.8552E-02, -1.1619E-01, -1.3262E-01, -1.4058E-01, -1.4232E-01, -1.3965E-01, -1.3393E-01, -1.2621E-01, -1.1727E-01, -1.0767E-01, -9.7834E-02, -8.8053E-02, -7.8541E-02, -6.9443E-02, -6.0857E-02, -5.2842E-02, -4.5434E-02, -3.8648E-02, -3.2486E-02, -2.6938E-02, -2.1990E-02, -1.7619E-02, -1.3803E-02, -1.0516E-02, -7.7283E-03, -5.4125E-03, -3.5381E-03, -2.0740E-03, -9.8701E-04, -2.4147E-04, 2.0259E-04, 3.9185E-04, 3.8300E-04, 2.4808E-04, 8.1916E-05, -1.0138E-06, -1.4852E-05, 2.6268E-05, 6.7113E-04, 1.8106E-03, 3.1240E-03, 4.3138E-03, 5.1407E-03, 5.4200E-03, 5.0125E-03, 3.8129E-03, 1.7434E-03, -1.2535E-03, -5.2163E-03, -1.0167E-02, -1.6111E-02, -2.3037E-02, -3.0911E-02, -3.9676E-02, -4.9245E-02, -5.9493E-02, -7.0251E-02, -8.1291E-02, -9.2318E-02, -1.0295E-01, -1.1270E-01, -1.2098E-01, -1.2702E-01, -1.2993E-01, -1.2864E-01, -1.2191E-01, -1.0837E-01, -8.6647E-02, -5.5503E-02, -1.4259E-02, 3.6561E-02, 9.4109E-02, 1.5145E-01, 1.9505E-01, 2.0217E-01, 1.4108E-01, -1.5200E-02, -2.3213E-01, -2.7172E-01, 2.8423E-01, -6.8474E-02, 1.5249E-02, -6.8474E-02, 2.8423E-01, -2.7172E-01, -2.3213E-01, -1.5200E-02, 1.4108E-01, 2.0217E-01, 1.9505E-01, 1.5145E-01, 9.4109E-02, 3.6561E-02, -1.4259E-02, -5.5503E-02, -8.6647E-02, -1.0837E-01, -1.2191E-01, -1.2864E-01, -1.2993E-01, -1.2702E-01, -1.2098E-01, -1.1270E-01, -1.0295E-01, -9.2318E-02, -8.1291E-02, -7.0251E-02, -5.9493E-02, -4.9245E-02, -3.9676E-02, -3.0911E-02, -2.3037E-02, -1.6111E-02, -1.0167E-02, -5.2163E-03, -1.2535E-03, 1.7434E-03, 3.8129E-03, 5.0125E-03, 5.4200E-03, 5.1407E-03, 4.3138E-03, 3.1240E-03, 1.8106E-03, 6.7113E-04, 2.6268E-05, -1.4852E-05); 
//The first 6 rows of the V matrix: 
float V[546] = float[](-1.2516E-07, -1.2715E-06, -3.7479E-06, -7.6960E-06, -1.3266E-05, -2.0624E-05, -2.9956E-05, -4.1471E-05, -5.5407E-05, -7.2033E-05, -9.1658E-05, -1.1464E-04, -1.4137E-04, -1.7234E-04, -2.0809E-04, -2.4925E-04, -2.9658E-04, -3.5094E-04, -4.1340E-04, -4.8519E-04, -5.6781E-04, -6.6306E-04, -7.7315E-04, -9.0076E-04, -1.0492E-03, -1.2228E-03, -1.4266E-03, -1.6675E-03, -1.9541E-03, -2.2979E-03, -2.7140E-03, -3.2233E-03, -3.8541E-03, -4.6468E-03, -5.6603E-03, -6.9822E-03, -8.7489E-03, -1.1181E-02, -1.4654E-02, -1.9853E-02, -2.8130E-02, -4.2461E-02, -7.0466E-02, -1.3634E-01, -3.4306E-01, -8.4285E-01, -3.4306E-01, -1.3634E-01, -7.0466E-02, -4.2461E-02, -2.8130E-02, -1.9853E-02, -1.4654E-02, -1.1181E-02, -8.7489E-03, -6.9822E-03, -5.6603E-03, -4.6468E-03, -3.8541E-03, -3.2233E-03, -2.7140E-03, -2.2979E-03, -1.9541E-03, -1.6675E-03, -1.4266E-03, -1.2228E-03, -1.0492E-03, -9.0076E-04, -7.7315E-04, -6.6306E-04, -5.6781E-04, -4.8519E-04, -4.1340E-04, -3.5094E-04, -2.9658E-04, -2.4925E-04, -2.0809E-04, -1.7234E-04, -1.4137E-04, -1.1464E-04, -9.1658E-05, -7.2033E-05, -5.5407E-05, -4.1471E-05, -2.9956E-05, -2.0624E-05, -1.3266E-05, -7.6960E-06, -3.7479E-06, -1.2715E-06, -1.2516E-07, 4.5871E-07, 6.4334E-06, 2.0853E-05, 4.4966E-05, 7.9899E-05, 1.2682E-04, 1.8699E-04, 2.6182E-04, 3.5285E-04, 4.6186E-04, 5.9085E-04, 7.4208E-04, 9.1816E-04, 1.1221E-03, 1.3573E-03, 1.6277E-03, 1.9381E-03, 2.2939E-03, 2.7013E-03, 3.1681E-03, 3.7031E-03, 4.3171E-03, 5.0230E-03, 5.8365E-03, 6.7766E-03, 7.8670E-03, 9.1369E-03, 1.0623E-02, 1.2372E-02, 1.4444E-02, 1.6916E-02, 1.9891E-02, 2.3507E-02, 2.7952E-02, 3.3485E-02, 4.0481E-02, 4.9482E-02, 6.1305E-02, 7.7220E-02, 9.9271E-02, 1.3086E-01, 1.7779E-01, 2.4931E-01, 3.5075E-01, 3.5119E-01, -4.7991E-01, 3.5119E-01, 3.5075E-01, 2.4931E-01, 1.7779E-01, 1.3086E-01, 9.9271E-02, 7.7220E-02, 6.1305E-02, 4.9482E-02, 4.0481E-02, 3.3485E-02, 2.7952E-02, 2.3507E-02, 1.9891E-02, 1.6916E-02, 1.4444E-02, 1.2372E-02, 1.0623E-02, 9.1369E-03, 7.8670E-03, 6.7766E-03, 5.8365E-03, 5.0230E-03, 4.3171E-03, 3.7031E-03, 3.1681E-03, 2.7013E-03, 2.2939E-03, 1.9381E-03, 1.6277E-03, 1.3573E-03, 1.1221E-03, 9.1816E-04, 7.4208E-04, 5.9085E-04, 4.6186E-04, 3.5285E-04, 2.6182E-04, 1.8699E-04, 1.2682E-04, 7.9899E-05, 4.4966E-05, 2.0853E-05, 6.4334E-06, 4.5871E-07, 5.4940E-08, 1.1276E-05, 4.8633E-05, 1.1934E-04, 2.2875E-04, 3.8176E-04, 5.8329E-04, 8.3852E-04, 1.1531E-03, 1.5331E-03, 1.9854E-03, 2.5178E-03, 3.1388E-03, 3.8584E-03, 4.6875E-03, 5.6389E-03, 6.7272E-03, 7.9691E-03, 9.3838E-03, 1.0994E-02, 1.2825E-02, 1.4908E-02, 1.7277E-02, 1.9977E-02, 2.3054E-02, 2.6570E-02, 3.0595E-02, 3.5212E-02, 4.0526E-02, 4.6658E-02, 5.3760E-02, 6.2013E-02, 7.1640E-02, 8.2908E-02, 9.6135E-02, 1.1168E-01, 1.2994E-01, 1.5121E-01, 1.7551E-01, 2.0187E-01, 2.2661E-01, 2.3823E-01, 2.0252E-01, 2.2027E-02, -4.0653E-01, 2.2198E-01, -4.0653E-01, 2.2027E-02, 2.0252E-01, 2.3823E-01, 2.2661E-01, 2.0187E-01, 1.7551E-01, 1.5121E-01, 1.2994E-01, 1.1168E-01, 9.6135E-02, 8.2908E-02, 7.1640E-02, 6.2013E-02, 5.3760E-02, 4.6658E-02, 4.0526E-02, 3.5212E-02, 3.0595E-02, 2.6570E-02, 2.3054E-02, 1.9977E-02, 1.7277E-02, 1.4908E-02, 1.2825E-02, 1.0994E-02, 9.3838E-03, 7.9691E-03, 6.7272E-03, 5.6389E-03, 4.6875E-03, 3.8584E-03, 3.1388E-03, 2.5178E-03, 1.9854E-03, 1.5331E-03, 1.1531E-03, 8.3852E-04, 5.8329E-04, 3.8176E-04, 2.2875E-04, 1.1934E-04, 4.8633E-05, 1.1276E-05, 5.4940E-08, 2.2927E-06, 1.2485E-05, -1.2711E-05, -1.0779E-04, -2.9609E-04, -5.9598E-04, -1.0236E-03, -1.5941E-03, -2.3229E-03, -3.2254E-03, -4.3184E-03, -5.6194E-03, -7.1475E-03, -8.9238E-03, -1.0971E-02, -1.3313E-02, -1.5979E-02, -1.8998E-02, -2.2403E-02, -2.6230E-02, -3.0519E-02, -3.5310E-02, -4.0650E-02, -4.6587E-02, -5.3170E-02, -6.0448E-02, -6.8469E-02, -7.7271E-02, -8.6880E-02, -9.7294E-02, -1.0847E-01, -1.2028E-01, -1.3249E-01, -1.4467E-01, -1.5606E-01, -1.6541E-01, -1.7060E-01, -1.6819E-01, -1.5254E-01, -1.1467E-01, -4.1217E-02, 8.3146E-02, 2.5268E-01, 3.2006E-01, -2.6119E-01, 9.1322E-02, -2.6119E-01, 3.2006E-01, 2.5268E-01, 8.3146E-02, -4.1217E-02, -1.1467E-01, -1.5254E-01, -1.6819E-01, -1.7060E-01, -1.6541E-01, -1.5606E-01, -1.4467E-01, -1.3249E-01, -1.2028E-01, -1.0847E-01, -9.7294E-02, -8.6880E-02, -7.7271E-02, -6.8469E-02, -6.0448E-02, -5.3170E-02, -4.6587E-02, -4.0650E-02, -3.5310E-02, -3.0519E-02, -2.6230E-02, -2.2403E-02, -1.8998E-02, -1.5979E-02, -1.3313E-02, -1.0971E-02, -8.9238E-03, -7.1475E-03, -5.6194E-03, -4.3184E-03, -3.2254E-03, -2.3229E-03, -1.5941E-03, -1.0236E-03, -5.9598E-04, -2.9609E-04, -1.0779E-04, -1.2711E-05, 1.2485E-05, 2.2927E-06, -1.0138E-06, 8.1916E-05, 2.4808E-04, 3.8300E-04, 3.9185E-04, 2.0259E-04, -2.4147E-04, -9.8701E-04, -2.0740E-03, -3.5381E-03, -5.4125E-03, -7.7283E-03, -1.0516E-02, -1.3803E-02, -1.7619E-02, -2.1990E-02, -2.6938E-02, -3.2486E-02, -3.8648E-02, -4.5434E-02, -5.2842E-02, -6.0857E-02, -6.9443E-02, -7.8541E-02, -8.8053E-02, -9.7834E-02, -1.0767E-01, -1.1727E-01, -1.2621E-01, -1.3393E-01, -1.3965E-01, -1.4232E-01, -1.4058E-01, -1.3262E-01, -1.1619E-01, -8.8552E-02, -4.6747E-02, 1.1662E-02, 8.6578E-02, 1.7053E-01, 2.3800E-01, 2.2568E-01, 2.0588E-02, -3.6559E-01, 1.4046E-01, -3.7472E-02, 1.4046E-01, -3.6559E-01, 2.0588E-02, 2.2568E-01, 2.3800E-01, 1.7053E-01, 8.6578E-02, 1.1662E-02, -4.6747E-02, -8.8552E-02, -1.1619E-01, -1.3262E-01, -1.4058E-01, -1.4232E-01, -1.3965E-01, -1.3393E-01, -1.2621E-01, -1.1727E-01, -1.0767E-01, -9.7834E-02, -8.8053E-02, -7.8541E-02, -6.9443E-02, -6.0857E-02, -5.2842E-02, -4.5434E-02, -3.8648E-02, -3.2486E-02, -2.6938E-02, -2.1990E-02, -1.7619E-02, -1.3803E-02, -1.0516E-02, -7.7283E-03, -5.4125E-03, -3.5381E-03, -2.0740E-03, -9.8701E-04, -2.4147E-04, 2.0259E-04, 3.9185E-04, 3.8300E-04, 2.4808E-04, 8.1916E-05, -1.0138E-06, -1.4852E-05, 2.6268E-05, 6.7113E-04, 1.8106E-03, 3.1240E-03, 4.3138E-03, 5.1407E-03, 5.4200E-03, 5.0125E-03, 3.8129E-03, 1.7434E-03, -1.2535E-03, -5.2163E-03, -1.0167E-02, -1.6111E-02, -2.3037E-02, -3.0911E-02, -3.9676E-02, -4.9245E-02, -5.9493E-02, -7.0251E-02, -8.1291E-02, -9.2318E-02, -1.0295E-01, -1.1270E-01, -1.2098E-01, -1.2702E-01, -1.2993E-01, -1.2864E-01, -1.2191E-01, -1.0837E-01, -8.6647E-02, -5.5503E-02, -1.4259E-02, 3.6561E-02, 9.4109E-02, 1.5145E-01, 1.9505E-01, 2.0217E-01, 1.4108E-01, -1.5200E-02, -2.3213E-01, -2.7172E-01, 2.8423E-01, -6.8474E-02, 1.5249E-02, -6.8474E-02, 2.8423E-01, -2.7172E-01, -2.3213E-01, -1.5200E-02, 1.4108E-01, 2.0217E-01, 1.9505E-01, 1.5145E-01, 9.4109E-02, 3.6561E-02, -1.4259E-02, -5.5503E-02, -8.6647E-02, -1.0837E-01, -1.2191E-01, -1.2864E-01, -1.2993E-01, -1.2702E-01, -1.2098E-01, -1.1270E-01, -1.0295E-01, -9.2318E-02, -8.1291E-02, -7.0251E-02, -5.9493E-02, -4.9245E-02, -3.9676E-02, -3.0911E-02, -2.3037E-02, -1.6111E-02, -1.0167E-02, -5.2163E-03, -1.2535E-03, 1.7434E-03, 3.8129E-03, 5.0125E-03, 5.4200E-03, 5.1407E-03, 4.3138E-03, 3.1240E-03, 1.8106E-03, 6.7113E-04, 2.6268E-05, -1.4852E-05); 
//center of the convolution 
int Nc = 45; 
//number of ranks 
int Nr = 6; 
//convolution size 
int N = 91; 

vec3 pack2vec3(vec3 a, vec3 b) 
{
    uvec3 packed = uvec3(packHalf2x16(vec2(a.x,b.x)), packHalf2x16(vec2(a.y,b.y)), packHalf2x16(vec2(a.z,b.z)));
    return vec3(uintBitsToFloat(packed.x), uintBitsToFloat(packed.y), uintBitsToFloat(packed.z));
}

void unpack2vec3(vec3 packed, out vec3 a, out vec3 b) 
{
    uvec3 unpacked = uvec3(floatBitsToUint(packed.x), floatBitsToUint(packed.y), floatBitsToUint(packed.z));
    vec2 unpackedA = unpackHalf2x16(unpacked.x);
    vec2 unpackedB = unpackHalf2x16(unpacked.y);
    vec2 unpackedC = unpackHalf2x16(unpacked.z);
    a = vec3(unpackedA.x, unpackedB.x, unpackedC.x);
    b = vec3(unpackedA.y, unpackedB.y, unpackedC.y);
}

//first pass of separable convolution
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{    
    //do a convolution in the x direction on iChannel0
    //since we have 6 ranks and we can only store 2 in a vec3 we need to do the partial sums in 1/2 resolution chunks in a single buffer(which means max 8 ranks)
    ivec2 coord = ivec2(fragCoord.xy) % ivec2(iResolution.xy/2.0);
    ivec2 block = ivec2(fragCoord.xy) / ivec2(iResolution.xy/2.0);
    int rank_offset = 2 * (block.x + block.y * 2);

    if(rank_offset >= Nr)
        discard;

    vec3 sum0 = vec3(0.0);
    vec3 sum1 = vec3(0.0);
    for (int i = -Nc; i < Nc; i++) 
    {
        //use texelFetch to get the pixel at the current index
        //since we are doing it at 1/2 resolution we need to use 1 mip level higher
        vec4 pixel = texelFetch(iChannel0, coord + ivec2(i, 0), 1);
        vec3 pcolor = pixel.xyz/(pixel.w+1e-6);
        
        //get the rank index
        int offset = i + Nc;
        sum0 += pcolor * U[offset + rank_offset * N];
        sum1 += pcolor * U[offset + (rank_offset + 1) * N];
    }

    //write the sum packed to the output
    fragColor = vec4(pack2vec3(sum0, sum1), 1.0);
}

//second pass: do the convolution in the y direction
//and write the result to the output    
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    //do a convolution in the y direction on iChannel0
    ivec2 resol = ivec2(iResolution.xy/2.0);
    ivec2 coord = ivec2(fragCoord.xy) % resol;
    ivec2 block = ivec2(fragCoord.xy) / resol;

    //we only need 1 block, since we can sum all the ranks here
    if(block.x + block.y * 2 >= 1)
        discard;

    vec3 sum = vec3(0.0);
    for (int i = -Nc; i < Nc; i++) 
    {
        //use texelFetch to get the pixel at the current index
        ivec2 pos = ivec2(coord.x, coord.y + i);

        //skip if the coordinate is outside the image
        if(pos.x < 0 || pos.x >= iResolution.x/2 || pos.y < 0 || pos.y >= iResolution.y/2)
            continue;
        
        //loop over pairs of ranks
        for(int j = 0; j < Nr; j += 2)
        {
            int block_id = j / 2;
            ivec2 block_offset = ivec2(block_id % 2, block_id / 2);
            vec4 pixel = texelFetch(iChannel0, pos + block_offset * resol, 0);

            //unpack the values
            vec3 val1, val2;
            unpack2vec3(pixel.xyz, val1, val2);

            //add the values to the sum
            sum += val1 * V[i + Nc + j * N];
            sum += val2 * V[i + Nc + (j + 1) * N];
        }
    }

    //return the sum
    fragColor = vec4(sum, 1.0);
}


